openapi: 3.0.0
info:
  title: Delilah Restó
  version: 4.0.0
  description: Servicio de gestion de pedidos de un restaurante
servers:
  - url: http://localhost:5000
    description: Servidor de desarrollo
  - url: https://delilah-api-mip.ml/api
    description: Servidor publico

paths:
  /auth/local/login:
    post:
      tags:
        - Autenticación
      summary: Autorizar con email y contraseña
      description: Autoriza de manera local utilizando un email y contraseña de un usuario previamente registrado (sin utilizar IdP)
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        "200":
          description: Se han comprobado las credenciales y son correctas
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Autenticado correctamente!"
                  error:
                    type: boolean
                    example: false
        "401":
          description: El usuario y/o la contraseña son incorrectas, compruebe bien los valores enviados
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Usuario y/o contraseña incorrectas"
                  error:
                    type: boolean
                    example: true
  /users:
    get:
      tags:
        - Usuario
      summary: Todos los usuarios
      description: Devuelve una lista con todos los usuarios registrados y sus respectivos datos, Solo los administradores pueden verlo
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/schemas/AuthenticationError"
        "403":
          $ref: "#/components/schemas/AuthorizationError"
    post:
      tags:
        - Usuario
      summary: Crear un nuevo usuario
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/New User"

      responses:
        "201":
          description: Usuario creado correctamente
        "401":
          $ref: "#/components/schemas/AuthenticationError"
        "422":
          description: Datos invalidos

  /users/{userID}:
    patch:
      tags:
        - Usuario
      summary: Habilitar/Deshabilitar un usuario
      description: Habilitar un usuario, solo los administradores pueden hacerlo
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean

      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/schemas/AuthenticationError"
        "403":
          $ref: "#/components/schemas/AuthorizationError"

  /orders:
    get:
      tags:
        - Pedidos
      summary: Todos los pedidos
      description: Devuelve una lista de los pedidos realizados por el usuario. En cambio, si el usuario es administrador obtendra un listado de TODOS los pedidos realizados
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/Order"
                    - type: object
                      properties:
                        products:
                          type: array
                          items:
                            allOf:
                              - $ref: "#/components/schemas/Product"
                              - type: object
                                properties:
                                  amount:
                                    type: integer
        "401":
          $ref: "#/components/schemas/AuthenticationError"

    post:
      tags:
        - Pedidos
      summary: Realizar un pedido
      description: Realiza un pedido, indicando las ids de los productos a pedir y del metodo de pago
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/New Order"
      responses:
        "201":
          description: Pedido creado correctamente
        "401":
          $ref: "#/components/schemas/AuthenticationError"

  /orders/{orderID}:
    put:
      tags:
        - Pedidos
      security:
        - bearerAuth: []
      summary: Modificar pedido
      description: Modifica un pedido en especifico
      parameters:
        - in: path
          name: orderID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/New Order"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "401":
          $ref: "#/components/schemas/AuthenticationError"
        "404":
          description: La orden con la id especificada, no existe
    patch:
      tags:
        - Pedidos
      security:
        - bearerAuth: []
      summary: Modifica el estado del pedido
      parameters:
        - in: path
          name: orderID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - "nuevo"
                    - "confirmado"
                    - "preparando"
                    - "enviando"
                    - "entregado"
                    - "cancelado"

      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/schemas/AuthenticationError"
        "422":
          description: El pedido ya esta confirmado o el estado es invalido
        "404":
          description: La orden con la id especificada, no existe

  /products:
    get:
      tags:
        - Productos
      security:
        - bearerAuth: []
      summary: Todos los Productos
      description: Muestra todos los productos
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "401":
          $ref: "#/components/schemas/AuthenticationError"

    post:
      tags:
        - Productos
      security:
        - bearerAuth: []
      summary: Añadir producto
      description: Añade un nuevo producto
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/New Product"
      responses:
        "201":
          description: Creado correctamente
        "401":
          $ref: "#/components/schemas/AuthenticationError"
        "403":
          $ref: "#/components/schemas/AuthorizationError"

  /products/{productID}:
    put:
      tags:
        - Productos
      security:
        - bearerAuth: []
      summary: Modificar producto
      description: Modifica los datos de un producto existente
      parameters:
        - in: path
          name: productID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/New Product"
      responses:
        "201":
          description: Created
        "401":
          $ref: "#/components/schemas/AuthenticationError"
        "403":
          $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: El producto no existe

    patch:
      tags:
        - Productos
      security:
        - bearerAuth: []
      summary: Habilitar/Deshabilitar producto
      description: Habilita/Deshabilita un producto, esto afecta en la visibilidad del producto para los usuarios
      parameters:
        - in: path
          name: productID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/schemas/AuthenticationError"
        "403":
          $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: El producto no existe

    delete:
      tags:
        - Productos
      security:
        - bearerAuth: []
      summary: Eliminar producto
      description: Elimina un producto
      parameters:
        - in: path
          name: productID
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/schemas/AuthenticationError"
        "403":
          $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: El producto no existe

  /paymentmethods:
    get:
      tags:
        - Metodos de pago
      security:
        - bearerAuth: []
      summary: Todos los metodos de pago
      description: Devuelve todos los metodos de pago existentes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Payment method"
        "401":
          $ref: "#/components/schemas/AuthenticationError"

    post:
      tags:
        - Metodos de pago
      security:
        - bearerAuth: []
      summary: Añadir metodo de pago
      description: Añade un nuevo metodo de pago, solo Administradores
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/New Payment method"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment method"
        "401":
          $ref: "#/components/schemas/AuthenticationError"
        "403":
          $ref: "#/components/schemas/AuthorizationError"

  /paymentmethods/{paymentMethodID}:
    patch:
      tags:
        - Metodos de pago
      security:
        - bearerAuth: []
      summary: Modificar metodo de pago
      description: Modifica un metodo de pago existente
      parameters:
        - in: path
          name: paymentMethodID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/New Payment method"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment method"
        "401":
          $ref: "#/components/schemas/AuthenticationError"
        "403":
          $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: El metodo de pago no existe

    delete:
      tags:
        - Metodos de pago
      security:
        - bearerAuth: []
      summary: Eliminar metodo de pago
      description: Elimina un metodo de pago
      parameters:
        - in: path
          name: paymentMethodID
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/schemas/AuthenticationError"
        "403":
          $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: El metodo de pago no existe

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      properties:
        id:
          type: integer
          format: int32
        username:
          type: string
          example: stejobs20
        fullName:
          type: string
          example: Steve Jobs
        email:
          type: string
          example: steveJobs20@server.com
        phoneNumber:
          type: string
          example: "+5412545410"
        address:
          type: string
          example: LA, USA 1231
        isAdmin:
          type: boolean
          example: true
        enabled:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    New User:
      properties:
        username:
          type: string
          example: stejobs20
        fullName:
          type: string
          example: Steve Jobs
        email:
          type: string
          example: steveJobs20@server.com
        phoneNumber:
          type: string
          example: "+5412545410"
        address:
          type: string
          example: LA, USA 1231
        password:
          type: string
          example: "123456"
    Login:
      properties:
        email:
          type: string
          example: test@example.com
        password:
          type: string
          example: "123456"
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: id del pedido
        createdAt:
          type: string
          example: "2021-11-23T22:27:21.000Z"
          description: Hora en que se realizo el pedido
        state:
          type: string
          enum:
            - "nuevo"
            - "confirmado"
            - "preparando"
            - "enviando"
            - "cancelado"
        products:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        paymentMethod:
          $ref: "#/components/schemas/Payment method"
    New Order:
      type: object
      properties:
        products:
          type: array
          description: ids de los productos a pedir, (en este ejemplo, se solicito tres del producto 1 y solo dos del platillo 2)
          items:
            type: object
            properties:
              id:
                type: integer
              amount:
                type: integer
          example:
            - { "id": 1, "amount": 3 }
            - { "id": 2, "amount": 2 }
        paymentMethodId:
          type: integer
          example: 1
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          example: "Hamburguesa clásica"
        category:
          type: string
          example: "Comida rapida"
        price:
          type: number
          format: float
          example: 350.0
    New Product:
      type: object
      required:
        - name
        - category
        - price
        - enabled
      properties:
        name:
          type: string
          example: "Hamburguesa clásica"
        category:
          type: string
          example: "Comida rapida"
        price:
          type: number
          format: float
          example: 350.0
        enabled:
          type: boolean
          example: true
    Payment method:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string

        enabled:
          type: boolean
    New Payment method:
      type: object
      properties:
        name:
          type: string
          example: "Contado"
        enabled:
          type: boolean
    AuthorizationError:
      description: No tiene permisos para realizar esta acción
    AuthenticationError:
      description: No se encuentra autenticado
